#include <stdio.h>
 
int curr [ 5 ][ 5 ], max_claim [ 5 ][ 5 ] , avlble [ 5 ]  ;
int allocation [ 5 ] = { 0, 0, 0, 0, 0 }  ;
int maxres [ 5 ], running [ 5 ], safe = 0  ;
int counter = 0, i, j, exec, rsrces, prcesses, z = 1  ;
 
int main ( )
{
     printf ( "\nEnter number of processes: " ) ;
     scanf ( "%d", &prcesses ) ;
 
     for ( i = 0 ; i < prcesses ; i++ )
{
         running[i] = 1 ;
         counter++ ;
     }
 
     printf ( "\nEnter number of resources: " ) ;
     scanf ( "%d", &rsrces ) ;
 
     printf ( "\nEnter Claim Vector:" ) ;
     for ( i = 0 ; i < rsrces ; i++ )
{
        scanf ( "%d", &maxres[i] ) ;
     }
 
   printf ( "\nEnter Allocated Resource Table:\n" ) ;
     for ( i = 0 ; i < prcesses ; i++ )
{
        for ( j = 0 ; j < rsrces ; j++ )
{
   scanf ( "%d", &curr[i][j] ) ;
         }
     }
 
     printf ( "\nEnter Maximum Claim Table:\n" ) ;
     for ( i = 0 ; i < prcesses ; i++ )
{
         for ( j = 0 ; j < rsrces ; j++ )
{
             scanf ( "%d", &max_claim[i][j] ) ;
         }
     }
 
printf ( "\nThe Claim Vector is: " ) ;
     for ( i = 0 ; i < rsrces ; i++ )
{
        printf ( "\t%d", maxres[i] ) ;
}
 
     printf ( "\nThe Allocated Resource Table:\n" ) ;
     for ( i = 0 ; i < prcesses ; i++ )
{
        for  ( j = 0 ; j < rsrces ; j++ )
{
             printf ( "\t%d", curr[i][j] ) ;
         }
printf ( "\n" ) ;
     }
 
     printf ( "\nThe Maximum Claim Table:\n" ) ;
     for  ( i = 0 ; i < prcesses ; i++ )
{
         for  ( j = 0 ; j < rsrces ; j++ )
{
        printf ( "\t%d", max_claim[i][j] ) ;
         }
         printf ( "\n" ) ;
     }
 
     for  ( i = 0 ; i < prcesses ; i++ )
{
         for  ( j = 0 ; j < rsrces ; j++ )
{
             allocation[j] += curr[i][j] ;
         }
     }
 
     printf ( "\nAllocated resources:" ) ;
     for  ( i = 0 ; i < rsrces ; i++ )
{
         printf ( "\t%d", allocation[i] ) ;
     }
 
     for ( i = 0 ; i < rsrces ; i++ )
{
        avlble[i] = maxres[i] - allocation[i] ;
}
 
     printf ( "\nAvailable resources:" ) ;
     for ( i = 0 ; i < rsrces ; i++ )
{
         printf ( "\t%d", avlble[i] ) ;
     }
     printf ( "\n" ) ;
 
     while ( counter != 0 )
{
         safe = 0 ;
         for ( i = 0 ; i < prcesses ; i++ )
{
             if ( running[i] )
{
                 exec = 1 ;
                 for ( j = 0 ; j < rsrces ; j++ )
{
                     if ( max_claim[i][j] - curr[i][j] > avlble[j] )
{
                         exec = 0 ;
                         break ;
                     }
                 }
                 if ( exec )
{
                     printf ( "\nProcess%d is executing\n", i + 1 ) ;
                     running[i] = 0 ;
                     counter-- ;
                     safe = 1 ;
 
                     for ( j = 0 ; j < rsrces ; j++ )
{
                         avlble[j] += curr[i][j] ;
                     }
                break ;
                 }
             }
         }
         if ( !safe )
{
             printf ( "\nThe processes are in unsafe state.\n" ) ;
             break ;
         }
else
{
             printf ( "\nThe process is in safe state" ) ;
             printf ( "\nAvailable vector:" ) ;
 
             for ( i = 0 ; i < rsrces ; i++ )
{
                 printf ( "\t%d", avlble[i] ) ;
             }
 
        printf ( "\n" ) ;
         }
     }
     return 0 ;
}

Output:
Enter number of processes: 2


Enter number of resources: 2


Enter Claim Vector:1


Enter Allocated Resource Table:


Enter Maximum Claim Table:


The Claim Vector is:    1       0
The Allocated Resource Table:
        0       0
        0       0


The Maximum Claim Table:
        0       0
        0       0


Allocated resources:    0       0
Available resources:    1       0


Process1 is executing


The process is in safe state
Available vector:       1       0


Process2 is executing


The process is in safe state
Available vector:       1       0
